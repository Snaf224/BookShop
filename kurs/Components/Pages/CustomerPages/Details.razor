@page "/customers/details"

@using Microsoft.EntityFrameworkCore
@using kurs.Models
@inject IDbContextFactory<BooksDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Просмотр клиента</PageTitle>

<h1>Просмотр клиента</h1>

<div>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">ФИО клиента</dt>
            <dd class="col-sm-10">@customer.FullName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
            <dt class="col-sm-2">Адрес доставки</dt>
            <dd class="col-sm-10">@customer.ShippingAddress</dd>
            <dt class="col-sm-2">Телефон</dt>
            <dd class="col-sm-10">@customer.PhoneNumber</dd>
        </dl>
        <div>
            <a href="@($"/customers/edit?customerid={customer.CustomerId}")">Редактировать</a> |
            <a href="@($"/customers")">Возврат к списку клиентов</a>
        </div>
    }
</div>

@code {
    Customer? customer;

    [SupplyParameterFromQuery]
    public int CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customers.FirstOrDefaultAsync(m => m.CustomerId == CustomerId);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
