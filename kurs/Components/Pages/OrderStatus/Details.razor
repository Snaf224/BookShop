@page "/orderstatus/details"

@using Microsoft.EntityFrameworkCore
@using kurs.Models
@inject IDbContextFactory<BooksDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Просмотр статуса заказа</PageTitle>

<h1>Просмотр статуса заказа</h1>

<div>
    <hr />
    @if (orderStatus is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Статус заказа</dt>
            <dd class="col-sm-10">@orderStatus.Status</dd>
            <dt class="col-sm-2">Идентификатор заказа</dt>
            <dd class="col-sm-10">@orderStatus.OrderId</dd>
            <dt class="col-sm-2">Дата обновления</dt>
            <dd class="col-sm-10">@orderStatus.DateUpdated.ToShortDateString()</dd>
            <dt class="col-sm-2">Номер отслеживания</dt>
            <dd class="col-sm-10">@orderStatus.TrackingNumber</dd>
        </dl>
        <div>
            <a href="@($"/orderstatus/edit?statusid={orderStatus.StatusId}")">Редактировать</a> |
            <a href="@($"/orderstatus")">Возврат к списку статусов заказов</a>
        </div>
    }
</div>

@code {
    OrderStatus? orderStatus;

    [SupplyParameterFromQuery]
    public int OrderStatusId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        orderStatus = await context.OrderStatuses.FirstOrDefaultAsync(m => m.StatusId == OrderStatusId);

        if (orderStatus is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
